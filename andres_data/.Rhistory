x = c()
y = c()
for (i in 1:100) {
xi = floor(runif(1, min=0, max=50))
yi = rbinom(1, xi, .5)
x = c(x, xi)
y = c(y, yi)
}
plot(x, y)
x = c()
y = c()
for (i in 1:100) {
xi = floor(runif(1, min=0, max=50))
yi = rbinom(1, xi, .5)
x = c(x, xi)
y = c(y, yi)
}
plot(x, y)
x = c()
y = c()
for (i in 1:100) {
xi = floor(runif(1, min=0, max=50))
yi = rbinom(1, xi, .5)
x = c(x, xi)
y = c(y, yi)
}
plot(x, y)
x = c()
y = c()
for (i in 1:100) {
xi = floor(runif(1, min=0, max=50))
yi = rbinom(1, xi, .5)
x = c(x, xi)
y = c(y, yi)
}
plot(x, y)
x = c()
y = c()
for (i in 1:100) {
xi = floor(runif(1, min=0, max=50))
yi = rbinom(1, xi, .5)
x = c(x, xi)
y = c(y, yi)
}
plot(x, y)
seq(along=x)[x == max(x)]
seq(along=y)[y == max(y)]
x == max(x)
length(x)
1:length(x)
1:length(x)*[x == max(x)]
1:length(x)
[x == max(x)]
x == max(x)
x == max(x)
1*(x == max(x))
1:length(x)*1*(x == max(x)])
1:length(x)*1*(x == max(x))
(x == max(x))
rnorm(25)
rnorm(1, 25, 3)
rnorm(1, 25, 3)
rnorm(1, 25, 3)
rnorm(1, 25, 3)
rnorm(1, 25, 5)
rnorm(1, 25, 10)
max(rnorm(1, 25, 10), 0)
x = c()
y = c()
for (i in 1:100) {
#xi = floor(runif(1, min=0, max=50))
xi = floor(max(rnorm(1, 25, 10), 0))
yi = rbinom(1, xi, .5)
x = c(x, xi)
y = c(y, yi)
}
plot(x, y)
1:length(x)*1* (x == max(x))
seq(along=x)[x == max(x)]
seq(along=y)[y == max(y)]
source('~/.active-rstudio-document', echo=TRUE)
x = c()
y = c()
for (i in 1:100) {
#xi = floor(runif(1, min=0, max=50))
xi = floor(max(rnorm(1, 25, 10), 0))
yi = rbinom(1, xi, .5)
x = c(x, xi)
y = c(y, yi)
}
plot(x, y)
1:length(x)*1* (x == max(x))
seq(along=x)[x == max(x)]
seq(along=y)[y == max(y)]
x = c()
y = c()
for (i in 1:100) {
#xi = floor(runif(1, min=0, max=50))
xi = floor(max(rnorm(1, 25, 10), 0))
yi = rbinom(1, xi, .5)
x = c(x, xi)
y = c(y, yi)
}
plot(x, y)
1:length(x)*1* (x == max(x))
seq(along=x)[x == max(x)]
seq(along=y)[y == max(y)]
x = c()
y = c()
for (i in 1:100) {
#xi = floor(runif(1, min=0, max=50))
xi = floor(max(rnorm(1, 25, 10), 0))
yi = rbinom(1, xi, .5)
x = c(x, xi)
y = c(y, yi)
}
plot(x, y)
1:length(x)*1* (x == max(x))
seq(along=x)[x == max(x)]
seq(along=y)[y == max(y)]
x = c()
y = c()
for (i in 1:100) {
#xi = floor(runif(1, min=0, max=50))
xi = floor(max(rnorm(1, 25, 10), 0))
yi = rbinom(1, xi, .5)
x = c(x, xi)
y = c(y, yi)
}
plot(x, y)
1:length(x)*1* (x == max(x))
seq(along=x)[x == max(x)]
seq(along=y)[y == max(y)]
x = c()
y = c()
for (i in 1:100) {
#xi = floor(runif(1, min=0, max=50))
xi = floor(max(rnorm(1, 25, 10), 0))
yi = rbinom(1, xi, .5)
x = c(x, xi)
y = c(y, yi)
}
plot(x, y)
1:length(x)*1* (x == max(x))
seq(along=x)[x == max(x)]
seq(along=y)[y == max(y)]
x = c()
y = c()
for (i in 1:100) {
#xi = floor(runif(1, min=0, max=50))
xi = floor(max(rnorm(1, 25, 10), 0))
yi = rbinom(1, xi, .5)
x = c(x, xi)
y = c(y, yi)
}
plot(x, y)
1:length(x)*1* (x == max(x))
seq(along=x)[x == max(x)]
seq(along=y)[y == max(y)]
x = c()
y = c()
for (i in 1:100) {
#xi = floor(runif(1, min=0, max=50))
xi = floor(max(rnorm(1, 25, 10), 0))
yi = rbinom(1, xi, .5)
x = c(x, xi)
y = c(y, yi)
}
plot(x, y)
1:length(x)*1* (x == max(x))
seq(along=x)[x == max(x)]
seq(along=y)[y == max(y)]
x = c()
y = c()
for (i in 1:100) {
#xi = floor(runif(1, min=0, max=50))
xi = floor(max(rnorm(1, 25, 10), 0))
yi = rbinom(1, xi, .5)
x = c(x, xi)
y = c(y, yi)
}
plot(x, y)
1:length(x)*1* (x == max(x))
seq(along=x)[x == max(x)]
seq(along=y)[y == max(y)]
x = c()
y = c()
for (i in 1:100) {
#xi = floor(runif(1, min=0, max=50))
xi = floor(max(rnorm(1, 25, 10), 0))
yi = rbinom(1, xi, .5)
x = c(x, xi)
y = c(y, yi)
}
plot(x, y)
1:length(x)*1* (x == max(x))
seq(along=x)[x == max(x)]
seq(along=y)[y == max(y)]
x = c()
y = c()
for (i in 1:100) {
#xi = floor(runif(1, min=0, max=50))
xi = floor(max(rnorm(1, 25, 10), 0))
yi = rbinom(1, xi, .5)
x = c(x, xi)
y = c(y, yi)
}
plot(x, y)
1:length(x)*1* (x == max(x))
seq(along=x)[x == max(x)]
seq(along=y)[y == max(y)]
x = c()
y = c()
for (i in 1:100) {
#xi = floor(runif(1, min=0, max=50))
xi = floor(max(rnorm(1, 25, 10), 0))
yi = rbinom(1, xi, .5)
x = c(x, xi)
y = c(y, yi)
}
plot(x, y)
1:length(x)*1* (x == max(x))
seq(along=x)[x == max(x)]
seq(along=y)[y == max(y)]
x = c()
y = c()
for (i in 1:100) {
#xi = floor(runif(1, min=0, max=50))
xi = floor(max(rnorm(1, 25, 10), 0))
yi = rbinom(1, xi, .5)
x = c(x, xi)
y = c(y, yi)
}
plot(x, y)
1:length(x)*1* (x == max(x))
seq(along=x)[x == max(x)]
seq(along=y)[y == max(y)]
x = c()
y = c()
for (i in 1:100) {
#xi = floor(runif(1, min=0, max=50))
xi = floor(max(rnorm(1, 25, 10), 0))
yi = rbinom(1, xi, .5)
x = c(x, xi)
y = c(y, yi)
}
plot(x, y)
1:length(x)*1* (x == max(x))
seq(along=x)[x == max(x)]
seq(along=y)[y == max(y)]
x = c()
y = c()
for (i in 1:100) {
#xi = floor(runif(1, min=0, max=50))
xi = floor(max(rnorm(1, 25, 10), 0))
yi = rbinom(1, xi, .5)
x = c(x, xi)
y = c(y, yi)
}
plot(x, y)
1:length(x)*1* (x == max(x))
seq(along=x)[x == max(x)]
seq(along=y)[y == max(y)]
x = c()
y = c()
for (i in 1:100) {
#xi = floor(runif(1, min=0, max=50))
xi = floor(max(rnorm(1, 25, 10), 0))
yi = rbinom(1, xi, .5)
x = c(x, xi)
y = c(y, yi)
}
plot(x, y)
1:length(x)*1* (x == max(x))
seq(along=x)[x == max(x)]
seq(along=y)[y == max(y)]
x = c()
y = c()
for (i in 1:100) {
#xi = floor(runif(1, min=0, max=50))
xi = floor(max(rnorm(1, 25, 10), 0))
yi = rbinom(1, xi, .5)
x = c(x, xi)
y = c(y, yi)
}
plot(x, y)
1:length(x)*1* (x == max(x))
seq(along=x)[x == max(x)]
seq(along=y)[y == max(y)]
x = c()
y = c()
for (i in 1:100) {
#xi = floor(runif(1, min=0, max=50))
xi = floor(max(rnorm(1, 25, 10), 0))
yi = rbinom(1, xi, .5)
x = c(x, xi)
y = c(y, yi)
}
plot(x, y)
1:length(x)*1* (x == max(x))
seq(along=x)[x == max(x)]
seq(along=y)[y == max(y)]
x = c()
y = c()
for (i in 1:100) {
#xi = floor(runif(1, min=0, max=50))
xi = floor(max(rnorm(1, 25, 10), 0))
yi = rbinom(1, xi, .5)
x = c(x, xi)
y = c(y, yi)
}
plot(x, y)
1:length(x)*1* (x == max(x))
seq(along=x)[x == max(x)]
seq(along=y)[y == max(y)]
patch_table
patch_compliant$males = patch_compliant$Answer.gender == "\"m\"" | patch_compliant$Answer.gender == "\"male\"" | patch_compliant$Answer.gender == "\"M\"" | patch_compliant$Answer.gender == "\"Male\"" | patch_compliant$Answer.gender == "\"MALE\""
patch_compliant$females = patch_compliant$Answer.gender == "\"f\"" | patch_compliant$Answer.gender == "\"female\"" | patch_compliant$Answer.gender == "\"F\"" | patch_compliant$Answer.gender == "\"Female\"" | patch_compliant$Answer.gender == "\"FEMALE\""
patch_compliant$twenties =  patch_compliant$Answer.age == "\"20\"" | patch_compliant$Answer.age == "\"21\"" | patch_compliant$Answer.age == "\"22\"" | patch_compliant$Answer.age == "\"23\"" | patch_compliant$Answer.age == "\"24\"" | patch_compliant$Answer.age == "\"25\"" | patch_compliant$Answer.age == "\"26\"" | patch_compliant$Answer.age == "\"27\"" | patch_compliant$Answer.age == "\"28\"" | patch_compliant$Answer.age == "\"29\""
patch_compliant$thirties = patch_compliant$Answer.age == "\"30\"" | patch_compliant$Answer.age == "\"31\"" | patch_compliant$Answer.age == "\"32\"" | patch_compliant$Answer.age == "\"33\"" | patch_compliant$Answer.age == "\"34\"" | patch_compliant$Answer.age == "\"35\"" | patch_compliant$Answer.age == "\"36\"" | patch_compliant$Answer.age == "\"37\"" | patch_compliant$Answer.age == "\"38\"" | patch_compliant$Answer.age == "\"39\""
patch_compliant$fourties = patch_compliant$Answer.age == "\"40\"" | patch_compliant$Answer.age == "\"41\"" | patch_compliant$Answer.age == "\"42\"" | patch_compliant$Answer.age == "\"43\"" | patch_compliant$Answer.age == "\"44\"" | patch_compliant$Answer.age == "\"45\"" | patch_compliant$Answer.age == "\"46\"" | patch_compliant$Answer.age == "\"47\"" | patch_compliant$Answer.age == "\"48\"" | patch_compliant$Answer.age == "\"49\""
patch_compliant$fifties = patch_compliant$Answer.age == "\"50\"" | patch_compliant$Answer.age == "\"51\"" | patch_compliant$Answer.age == "\"52\"" | patch_compliant$Answer.age == "\"53\"" | patch_compliant$Answer.age == "\"54\"" | patch_compliant$Answer.age == "\"55\"" | patch_compliant$Answer.age == "\"56\"" | patch_compliant$Answer.age == "\"57\"" | patch_compliant$Answer.age == "\"58\"" | patch_compliant$Answer.age == "\"59\""
```
summary(aov(odd_one ~  Answer.linguistic_framing_condition + Answer.item, data = patch_compliant))
runif(#)
#
)
runif(3)
runif(3)*1:3
runif(3)*1:3
runif(3)*1:3
runif(3)*1:3
runif(3)*1:3
1:3 + 1:3
rnorm(1000)
x = runif(1000)
y = x*1:1000 + rnorm(1000)
plot(x, y)
x = runif(1000)
y = x*1:1000 # + rnorm(1000)
plot(x, y)
1:2*1:2*1:2
x = runif(1000)
y = x*1:1000 * rnorm(1000)
plot(x, y)
lines(lowess(x, y, f=0.5, iter=0), lwd=2)
x = runif(1000)
y = x*1:1000 + rnorm(1000)
plot(x, y)
lines(lowess(x, y, f=0.5, iter=0), lwd=2)
x = runif(1000)
y = x*1:1000 + rnorm(1000)
plot(x, y)
lines(lowess(x, y, f=0.5, iter=0), lwd=2, col = "red")
1:4^2
(1:3)^2
x = runif(1000)
y = (x*1:1000)^2 + rnorm(1000)
plot(x, y)
lines(lowess(x, y, f=0.5, iter=0), lwd=2, col = "red")
(1:3)^1:3
(1:3)^(1:3)
x = runif(1000)
y = (x*1:1000)^(rnorm(1000))
plot(x, y)
lines(lowess(x, y, f=0.5, iter=0), lwd=2, col = "red")
y
summary(aov(odd_one ~  Answer.linguistic_framing_condition + Answer.item, data = patch_compliant))
patch$odd_one <- patch$Answer.choice=="\"odd_one\""
patch$twin_1 <- patch$Answer.choice=="\"twin_1\""
patch$twin_2 <- patch$Answer.choice=="\"twin_2\""
compliant <- patch$Answer.manip_check_target == "\"2\"" & patch$Answer.manip_check_dist == "\"2\"" & patch$Answer.manip_check_foil == "\"2\"" & patch$Answer.name_check_correct == "\"TRUE\""
patch_compliant <- subset(patch,compliant)
length(patch$Answer.item)
head(patch)
compliant <- patch$Answer.manip_check_target == "\"2\"" & patch$Answer.manip_check_dist == "\"2\"" & patch$Answer.manip_check_foil == "\"2\"" & patch$Answer.name_check_correct == "\"TRUE\""
patch_compliant <- subset(patch,compliant)
length(patch_compliant$Answer.item)
patch$odd_one <- patch$Answer.choice=="\"odd_one\""
patch$twin_1 <- patch$Answer.choice=="\"twin_1\""
patch$twin_2 <- patch$Answer.choice=="\"twin_2\""
patch_subset = subset(patch_compliant, patch_compliant$Answer.linguistic_framing_condition == 9)
word_subset = subset(patch_compliant, patch_compliant$Answer.linguistic_framing_condition == 10)
patch_table <- aggregate(cbind(odd_one,
twin_1,
twin_2) ~
Answer.linguistic_framing_condition , data=patch_compliant, sum)
patch_table
patch_table[1,]
patch_table[1,2:$]
patch_table[1,2:4]
sum(patch_table[1,2:4])
points_to_patch = sum(patch_table[1,2:4])
points_to_patch = patch_table[1,2] / sum(patch_table[1,2:4])
points_to_patch
setwd("~/Documents/Stanford/Autumn2013-Masters/PayedWork/andres_data")
# When features are requested
with_count <- read.csv("forced_choice_no_fam_6random_count_16_december_ALLS.csv",
header=TRUE, sep="\t", row.names=NULL, stringsAsFactors = FALSE)
length(with_count$Answer.choice_correct)
# Proportion of people counting choosing target
mean(with_count$Answer.choice_correct == "\"TRUE\"")
# When features are not requested
without_count <- read.csv("forced_choice_no_fam_6random_NOcount_16_december_ALNC.csv",
header=TRUE, sep="\t", row.names=NULL, stringsAsFactors = FALSE)
length(without_count$Answer.choice_correct)
# Proportion of people not counting choosing target
mean(without_count$Answer.choice_correct == "\"TRUE\"")
count_compliant <- with_count$Answer.manip_check_target == "\"2\"" & with_count$Answer.manip_check_dist == "\"1\""
with_count_wrong <- subset(with_count,!count_compliant)
with_count <- subset(with_count,count_compliant)
with_count$target <- with_count$Answer.choice=="\"target\""
with_count$logical <- with_count$Answer.choice=="\"logical\""
with_count$foil <- with_count$Answer.choice=="\"foil\""
ms.with_count <- aggregate(cbind(target,
logical,
foil) ~
Answer.item, data=with_count, sum)
es_np_with_count <- mean(with_count$target)
without_count$target <- without_count$Answer.choice=="\"target\""
without_count$logical <- without_count$Answer.choice=="\"logical\""
without_count$foil <- without_count$Answer.choice=="\"foil\""
ms.without_count <- aggregate(cbind(target,
logical,
foil) ~
Answer.item, data=without_count, sum)
es_np_without_count <- mean(without_count$target)
```
with_and_without = rbind(with_count, without_count)
summary(aov(target ~  as.factor(Answer.target_position), data = with_and_without))
summary(aov(target ~ as.factor(Answer.item) + as.factor(Answer.participant_feature_count_condition) + as.factor(Answer.target_position), data = with_and_without))
# There does not seem to be a statistically significant difference
contingeny = matrix(data = c(sum(without_count$Answer.choice_correct == "\"TRUE\""), length(without_count$Answer.choice_correct) - sum(without_count$Answer.choice_correct == "\"TRUE\""), sum(with_count$Answer.choice_correct == "\"TRUE\""), length(with_count$Answer.choice_correct) - sum(with_count$Answer.choice_correct == "\"TRUE\"")), nrow = 2)
chisq.test(contingeny)
library(plyr)
library(reshape2)
library(ggplot2)
library(binom)
library(bootstrap)
#colorblind-friendly color palettes
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
#statistics for boolean factors; copied from useful.R, with a slightly different mean function to work with the choiceCorrect factor
l.mean <- function(...){mean(as.logical(...))}
l.theta <- function(x,xdata,na.rm=T) {l.mean(xdata[x],na.rm=na.rm)}
l.ci.low <- function(x,na.rm=T) {
l.mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,l.theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
l.ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,l.theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - l.mean(x,na.rm=na.rm)}
md <- melt(with_and_without, measure.vars = c("target","logical", "foil"), variable.name="object", value.name="chosen")
ms <- ddply(md, .(object, Answer.item),
summarise,
c = mean(chosen),
n = sum(chosen),
l = length(chosen),
sdc = sd(chosen),
c.cih = c + l.ci.high(chosen),
c.cil = c - l.ci.low(chosen))
ms$item <- factor(ms$Answer.item)
levels(ms$item) <- c("boat","friend", "pizza", "snowman", "sundae", "Christmas tree")
ggplot(ms, aes(x= item, y=c, fill=object)) +
geom_bar(position=position_dodge()) +
geom_linerange(aes(ymin=c.cil,ymax=c.cih),
position=position_dodge(width=.9)) +
ylab("Probability of choosing") +
scale_fill_manual(values=cbPalette)
# And here a compariso between the conditions.
count_table <- ddply(md, .(object, Answer.participant_feature_count_condition), #Answer.item,
summarise,
c = mean(chosen),
n = sum(chosen),
l = length(chosen),
sdc = sd(chosen),
c.cih = c + l.ci.high(chosen),
c.cil = c - l.ci.low(chosen))
count_table$count <- factor(count_table$Answer.participant_feature_count_condition)
levels(count_table$count) <- c("no", "yes")
ggplot(count_table, aes(x= count, y=c, fill=object)) +
geom_bar(position=position_dodge()) +
geom_linerange(aes(ymin=c.cil,ymax=c.cih),
position=position_dodge(width=.9)) +
ylab("Probability of choosing") +
scale_fill_manual(values=cbPalette)
count_table
md
md <- melt(with_and_without, measure.vars = c("target"), variable.name="object", value.name="chosen")
ms <- ddply(md, .(object, Answer.item),
summarise,
c = mean(chosen),
n = sum(chosen),
l = length(chosen),
sdc = sd(chosen),
c.cih = c + l.ci.high(chosen),
c.cil = c - l.ci.low(chosen))
count_table <- ddply(md, .(object, Answer.participant_feature_count_condition), #Answer.item,
summarise,
c = mean(chosen),
n = sum(chosen),
l = length(chosen),
sdc = sd(chosen),
c.cih = c + l.ci.high(chosen),
c.cil = c - l.ci.low(chosen))
count_table$count <- factor(count_table$Answer.participant_feature_count_condition)
levels(count_table$count) <- c("no", "yes")
ggplot(count_table, aes(x= count, y=c, fill=object)) +
geom_bar(position=position_dodge()) +
geom_linerange(aes(ymin=c.cil,ymax=c.cih),
position=position_dodge(width=.9)) +
ylab("Probability of choosing") +
scale_fill_manual(values=cbPalette)
library(melt)
?melt
